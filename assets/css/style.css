:root {
  --primary-color: #fce138;
  --secondary-color: #024e76;
  --tertiary-color: #39a6b2;
}

/* UNIVERSAL STYLES */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* more on this crazy alphanumerical value in a minute! */
/* adds color to the font of the entire page */
body {
  color: var(--tertiary-color);
  font-family: Helvetica, Arial, sans-serif;
}

/* HEADER STYLES START */
/* apply styles to <header> */
header {
  padding: 20px 35px;
  background-color: var(--tertiary-color);
  display: flex; /* default is row so no need to declare */
  justify-content: space-between;
  flex-wrap: wrap;
  position: -webkit-sticky; /* used to target old versions of safari and chrome, added before the next style */
  position: sticky; /* this and top: 0 sticks header to the top and leaves it there as you scroll */
  top: 0;
  background-image: url("../images/hero-bg.jpg"); /* from here down, it's to make the header look like the hero!! */
  background-size: cover;
  background-position: center;
  background-attachment: fixed; /* to place image relative to the viewport instead of the element, so theoretically, the image will look the same in every container if this is also used in that style */
  background-position: 80%;
  z-index: 9999; /* brings header in front of everything */
}

header h1 {
  font-weight: bold;
  font-size: 36px;
  color: var(--primary-color);
  text-shadow: 0 0 10px rgba(0, 0, 0, 0.5); /* horizontal offset, vertical offset, radius/size of blur, sets color to black at half transparency */
  margin: 0;
  display: inline;  
}

header a {
  text-decoration: none;
  color: var(--primary-color);
}

header nav {
  margin: 7px 0;
}

/* this makes the list under nav, be inline instead of a list */
header nav ul {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  list-style: none; /* removes markers bc it's a list */
}

header nav ul li a {
  font-weight: lighter;
  font-size: 1.55vw;
  text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  padding: 10px 15px; /* changed from margin: 0 30px; to create a tighter navigation menu */
}

header nav ul li a:hover { /* added in 2.4.6 */
  background: var(--primary-color);
  color: var(--secondary-color);
  border-radius: 15px;
  text-shadow: none;
}
/* HEADER STYLES END */

/* FOOTER STYLES START */
footer {
  background-color: var(--primary-color);
  width: 100%;
  padding: 40px 35px;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
}

footer h2 {
  color: var(--secondary-color);
  font-size: 30px;
  margin: 0;
}

footer div {
  line-height: 1.5;
  text-align: right;
}

footer a {
  color: var(--secondary-color);
}
/* FOOTER STYLES END */

/* STYLE ALL SECTION TAGS */
/* this gives space around the form box and the h2 section headers */
section {
  padding: 60px;
}

/* HERO STYLES START */
.hero {
  background-image: url("../images/hero-bg.jpg");
  background-size: cover; /* styles hero background image size */
  background-position: center; /* styles hero background image location, helps zoom out */
  background-attachment: fixed;
  background-position: 80%;
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  align-items: flex-start; /* added in 2.3.5 */
}

.hero-cta {
  width: 35%; /* container width size = 35% of browser width */
  text-align: right;
  margin: 3.5%;
  color: #fff;
  font-size: 18px;
  line-height: 1.2; /* changed from 1.3 to make text easier to read */
}

.hero-cta h2 {
  font-style: italic;
  font-size: 55px;
  color: var(--primary-color);
  text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

.hero-form {
  color: var(--secondary-color);
  width: 40%;
  margin: 3.5%;
  border: 3px solid var(--secondary-color);
  background-color: rgba(252, 225, 56, 0.8);/* var(--primary-color); */
  padding: 20px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  border-radius: 15px;
}

.hero-form h3 {
  font-size: 24px;
  margin: 0px;
}

/* this selects the p in the class hero-form */
.hero-form p {
  margin: 5px 0 15px 0;
}

.form-input {
  border: 1px solid var(--secondary-color);
  display: block; /* this makes the inline text go to a separate line */
  padding: 7px 15px;
  font-size: 16px;
  color: var(--secondary-color);
  width: 100%; /* this makes the white box be 100% width of the parent but also taking the content padding into consideration */
  margin-bottom: 15px;
  border-radius: 10px;
  background-color: rgba(255, 255, 255, 0.75);
}

.form-input:focus {
  background-color: rgba(255,255,255, 1);
  outline: none; /* this removes extra outline if there is one */
} /* this makes the form input's default state slightly transparent, then switches to full opaqueness when the input is in focus!! */

.hero-form label {
  margin: 0 5px; /* adds space to the left of the labels */
}

.checkbox-wrapper input, .radio-wrapper input {
  opacity: 0;
}

.checkbox-wrapper label, .radio-wrapper label {
  position: relative; /* custom radio checkbox buttons will sit absolutely inside of the labels */
  left: 10px;
  margin: 10px;
  line-height: 1.6;
} /* preps the label elements so that the new buttons fit inside */

.checkbox-wrapper label::before, .radio-wrapper label::before {
  content: "";
  height: 20px;
  width: 20px;
  background: rgba(255, 255, 255, 0.75);  
  border: 1px solid var(--secondary-color);  
  position: absolute; /* helps position buttons in label from start of container, so basically it places it on the Yes and No labels (on the content)!! and use bottom styles to move it */
  top: -4px;
  left: -30px;
} /* add new buttons over the old invisible buttons */
/* ::before helps add the new buttons before the <labels> "Yes" "No" "I acknowledge.." */

.radio-wrapper label::before {
  border-radius: 50%;
} /* makes Yes and No radio buttons circular */

.radio-wrapper label::after { /* because can't have 2 befores */
  content: "";
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--secondary-color); /* don't really need this anymore bc of back..img */
  position: absolute;
  left: -29px;
  top: -3px;
  background-image: radial-gradient(circle, var(--tertiary-color), var(--secondary-color));
}

.checkbox-wrapper label::after {
  content: "";
  height: 6px;
  width: 14px;
  border-left: 2px solid var(--secondary-color);
  border-bottom: 2px solid var(--secondary-color);
  position: absolute;
  left: -26px;
  top: 1px; /* up to here, it makes a L shaped thing */
  transform: rotate(-58deg); /* rotates the L shaped thing to make checkmark */
}

.checkbox-wrapper input + label::after, 
.radio-wrapper input + label::after {
  content: none;
} /* look at comment below */

.checkbox-wrapper input:checked + label::after, 
.radio-wrapper input:checked + label::after {
  content: "";
} /* If the radio buttons or checkboxes are in their default state, they'll have no ::after pseudo content. As soon as an input becomes :checked, however, the content and all of the other styles defined earlier will take effect */

.hero-form button {
  font-size: 16px;
  color: var(--primary-color);
  background-color: var(--secondary-color);
  padding: 10px 20px;
  border: none; /* this removes the default border the button comes w */
  border-radius: 10px;
}
/* Paragraphs that come immediately after any image */
img + p {
  font-weight: bold;
}

.hero-form button:hover {
  background-color: var(--tertiary-color);  
}
/* HERO STYLES END */

/* WHAT WE DO STYLES START */
.intro p {
  font-size: 20px;
  color: var(--tertiary-color);
  text-align: center;
  line-height: 1.7;
  width: 80%; /* shrinks width of paragraph, and para. is not centered, just the text inside of it */
  margin: 0 auto; /* centers a block element with a width less than 100% */
}
/* WHAT WE DO STYLES END */

/* WHAT YOU DO STYLES  START */
.steps {
  background: var(--primary-color);
}

.step { /* parent 1 */
  margin: 50px auto; /* clears area outside the border and is transparent */
  padding-bottom: 50px; /* space btw content container and border */
  width: 80%; /* 80% of parent container size within margin*/
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
}

.step:not(:last-child) { /* applies border to every child except last one!! but doesn't apply to h2 child bc the border style is styled after this section so that supersedes */
  border-bottom: 1px solid var(--tertiary-color);
} /* 2.4.6 used this option because it's less code */

.step h3 { /* child 1a */
  color: var(--secondary-color);
  font-size: 46px;
  margin-top: 10px;
  flex: 1 30%; /* 1=flex-grow 30%=flex-basis --> .step h3 will be at least 30% wide and will receive any extra space in the container */
}

.step-info { /* child 1b and parent 2 */
  flex: 2 70%; /* 2=flex-grow 70% flex-basis --> .step-info will be at least 70% wide but will receive any extra space in the container at a 2-to-1 ratio, so it will receive 2 more units of unused space than a sibling with a flex-grow of 1 */
  display: flex;
  flex-wrap: wrap;
  align-items: center;
}

.step-img { /* child 2a */
  flex: 1 12%; /* giving it a flex-basis prevent the flexbox parent from ignoring it!! -->  .step-img at the very least must be 12% of the width of .step-info */
  margin-right: 20px;
}

.step-img img {
  max-width: 100%; /* limits width of img to whatever its container is --> this fixes an issue that can arise with other browsers */
}

.step-text { /* child 2b --> need to give this child it's needs */
  flex: 12; /* flex-grow --> .step-text will be alloted 12x more unused space than .step-img --> flex-basis here is auto, which allows it to be whatever width is left over */
}

.step-text p {
  color: var(--tertiary-color);
  font-size: 18px;
}

.step-text h4 {
  font-size: 26px;
  line-height: 1.5;
  color: var(--secondary-color);
}
/* WHAT YOU DO STYLES END */

/* STYLES Repeated For what-we-do what-you-do meet-the-trainers reach-out titles START */
.section-title {
  font-size: 48px; /* changed from 55px bc 48px is big enough for all screens and 55px would be cramped for mobile screen */
  text-align: center;
  color: var(--secondary-color);
  padding-bottom: 20px;
  border-bottom: 3px solid;
  margin: 0 auto 35px auto;
  width: 50%; */ 50% of parent container (inside padding) */
}

.primary-border {
  border-color: var(--primary-color);
}

.secondary-border {
  border-color: var(--tertiary-color);
}
/* STYLES Repeated For what-we-do what-you-do meet-the-trainers reach-out titles END */

/* MEET THE TRAINERS STYLE START */
.trainers {
  width: 100%;
  margin: 0 auto;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}

.trainer {
  margin: 20px;
  background: var(--secondary-color);
  color: var(--primary-color);
  flex: 1; /* flex-grow=1 --> means children will share any extra space evenly */
}

.trainer img {
  width: 100%;
}

.trainer-bio {
  line-height: 1.3;
  padding: 25px;
}

.trainer-bio h3 {
  font-size: 28px;
}

.trainer-bio h4 {
  font-weight: lighter;
  font-size: 22px;
  margin-bottom: 15px;
}

.trainer-bio p {
  font-size: 17px;
}
/* MEET THE TRAINERS STYLES END */

/* REACH OUT STYLES START */
.contact {
  background-color: var(--secondary-color);
}

.contact h2 {
  color: var(--primary-color);
}

/* included the class of the parent just to be more specific --> bc if you just used .iframe and added another .iframe to the html then that one would be affected too */
.contact-info {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}

.contact-info > * { /* apply the preceding styles to the three flexbox child elements in the contact-info flexbox container instead of doing it for each 1 */
  flex: 1; /* all children spaced out evenly */
  margin: 15px;
}

.contact-info iframe {
  height: 400px;
}

.contact-info div {
  color: white;
}

.contact-info h3 {
  /* module has .contact-info h3 */
  font-size: 32px;
  color: var(--primary-color);
}

.contact-info p,
.contact-info address {
  /* use a comma to separate the two class element combos */
  font-size: 16px;
  font-style: normal;
  line-height: 1.5;
  margin: 20px 0; /* margin for top and bottom + left and right */
}

.contact-form input, .contact-form textarea {
  border: 1px solid var(--secondary-color);
  display: block;
  padding: 7px 15px;
  font-size: 16px;
  color: var(--secondary-color);
  width: 100%;
  margin-bottom: 15px;
  margin-top: 5px;
  border-radius: 10px;
  background-color: rgba(255,255,255, 0.75);
}

.contact-form input:focus, .contact-form textarea:focus {
  background-color: rgba(255,255,255, 1);
  outline: none;
} 

.contact-form button {
  width: 100%;
  border: none;
  background: var(--primary-color);
  color: var(--secondary-color);
  text-align: center;
  padding: 15px 0;
  font-size: 16px;
  border-radius: 10px;
}

.contact-form button:hover {
  color: var(--primary-color);
  background: var(--tertiary-color);
}

.contact-info a {
  color: var(--primary-color);
}
/* REACH OUT STYLES END */

/* UTILITY CLASSES STYLES START */
.text-left {
  text-align: left;
}

.text-right {
  /* it's good to keep class names generic to be used wherever */
  text-align: right;
}

.flex-row {
  display: flex; /* don't need flex-direction bc default is row */
}
/* UTILITY CLASSES STYLES END */

/* MEDIA QUERIES START */
/* MEDIA QUERY FOR SMALLER DESKTOP SCREENS AND SMALLER */
@media screen and (max-width: 980px) {
  header {
    padding-bottom: 0;
    justify-content: center;
    position: relative; /* added to undo stickiness of the header for smaller screens */
  }

  header h1 {
    width: 100%;
    text-align: center;
  }

  header nav ul {
    margin-top: 20px;
    width: 100%;
    justify-content: center;
  }

  header nav ul li a {
    font-size: 20px;
  }

  footer h2, footer div { /* applied to both footer children */
    text-align: center;
    width: 100%;
  }

  .hero-cta, .hero-form {
    width: 100%;
  }
  
  .hero-cta { /* don't want to center form */
    text-align: center;
  }

  .section-title {
    width: 80%; /* makes them wider on smaller screens */
  }
  
  .trainer {
    flex: 0 70%; /* made cards just wide enough to be on their own row --> flex-grow is set to 0, it won't grow to take up unused space and will stay at the 70% we used for flex-basis */
  }
  
  .contact-info iframe{
    flex: 1 100%; /* to get google map to get its own row */
  }
}
/* Because both the <header> and <footer> elements are flex containers, we only had to tell both of their children to be 100% of the width. Because flex-wrap is turned on to wrap overflowing content, it allows both children to get their own row one on top of the other. The only thing we need to do then is adjust their justification properties to center them on the page, and adjust some font sizes and spacing to tighten up the design. */

@media screen and (max-width: 768px) {
  section {
    padding: 30px 15px;
  }

  .step h3 {
    flex: 1 100%; /* to give h3 its own row! 100% of parent */
    text-align: center;
  }

  .step-info {
    flex: 2 100%; /* .step-info will be at least 100% wide but will receive any xtra space container at a 2-to-1 ratio */
    text-align: center;
    justify-content: center;
  }

  .step-img {
    flex: 0 32%; /* We didn't want the icon to become the full width, however, because it would get too large. So we capped it at 32% width using flex-basis and told it not to take up any extra unused space by setting flex-grow to 0 */
    margin-right: 0;
    margin-top: 15px;
    margin-bottom: 15px;
  }

  .step-text {
    flex: 100%;  /* flex-basis */
  }
}

@media screen and (max-width: 575px) {

  .hero-form button {
    width: 100%; /* make button 100% size of parent container */
  }

  .section-title {
    width: 95%; /* inc size of section titles */
  }
  .intro p {
    width: 100%; /* paragraph for what we do sxn takes full space of parent container */
  }

  .trainer {
    flex: 0 100%; /* flex-grow = 0 = don't grow, flex-basis = 100% = trainer cards take up 100% of parent container */
  }

  .contact-info > * {
    flex: 0 100%; /* don't grow, all children take up 100% of parent container */
  }

  .contact-form {
    order: 3; /* to make it be the 3rd child down (changed the order of the children) */
  }
}

/* default state */
button {
  background: white;
}

/* mouse is hovering over button */
button:hover {
  background: red;
}

/* button is in focus because it was the most recently clicked element on the page */
button:focus {
  background: green;
}

/* user is actively pressing the cursor down on the button */
button:active {
  background: blue;
}